/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.21
 * Generated at: 2020-04-27 02:53:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.회원가입DB사용;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.sql.*;
import javax.naming.*;
import java.sql.*;

public final class member_005fmodify_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.sql");
    _jspx_imports_packages.add("javax.naming");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
request.setCharacterEncoding("UTF-8"); 
      out.write("  \r\n");

     Connection conn = null;
     PreparedStatement pstmt =null;
     ResultSet rs = null;
     String nowId = (String) session.getAttribute("id");
     
     try{
      Context init=new InitialContext();
      DataSource ds =(DataSource) init.lookup("java:comp/env/jdbc/OracleDB");
      conn = ds.getConnection();
      
      pstmt=conn.prepareStatement("select * from 회원가입 where id=?");
      pstmt.setString(1, nowId);
      rs=pstmt.executeQuery();
      while(rs.next()) {

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<form name = \"join\" action=\"Modify_process.jsp\" method=\"post\">\r\n");
      out.write("\t\t<div align=\"center\">\r\n");
      out.write("\t\t\t<table>\r\n");
      out.write("\t\t\t\t<table border=\"1\">\r\n");
      out.write("\t\t\t\t\t<th colspan=\"2\" \" bgcolor=\"#e9e9e9\">회원 정보 수정</th>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td bgcolor=\"powderblue\" align=\"center\">아이디 :</td>\r\n");
      out.write("\t\t\t\t\t\t<td><input type=\"text\" id=\"id\" name = \"id\" value=\"");
      out.print(rs.getString("id") );
      out.write("\" disabled=\"disabled\"> 4~12자의 영문 대소문자와 숫자로만\r\n");
      out.write("\t\t\t\t\t\t\t입력</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td bgcolor=\"powderblue\" align=\"center\">비밀 번호 :</td>\r\n");
      out.write("\t\t\t\t\t\t<td><input type=\"password\" id=\"userPW\" name = \"password\"> 4~12자의 영문\r\n");
      out.write("\t\t\t\t\t\t\t대소문자와 숫자로만 입력</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td bgcolor=\"powderblue\" align=\"center\">비밀 번호 확인 :</td>\r\n");
      out.write("\t\t\t\t\t\t<td><input type=\"password\" id=\"userPW2\"></td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td bgcolor=\"powderblue\" align=\"center\">메일주소 :</td>\r\n");
      out.write("\t\t\t\t\t\t<td><input type=\"email\" id=\"userEmail\" name = \"email\" value=\"");
      out.print(rs.getString("email") );
      out.write("\">예)id@domain.com</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<th colspan=\"2\" bgcolor=\"#e9e9e9\">개인 신상 정보</th>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td bgcolor=\"powderblue\" align=\"center\">주민등록 번호:</td>\r\n");
      out.write("\t\t\t\t\t\t<td><input type=\"text\" id=\"userNum1\" name = \"priNum1\">-\r\n");
      out.write("\t\t\t\t\t\t<input type=\"password\" id=\"userNum2\" name = \"priNum2\">예)123456-1234567</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td bgcolor=\"powderblue\" align=\"center\">주소:</td>\r\n");
      out.write("\t\t\t\t\t\t<td><input type=\"text\" id=\"sample4_postcode\"placeholder=\"우편번호\" name = \"addrNum1\"> \r\n");
      out.write("\t\t\t\t\t\t<input type=\"button\" name = \"addrNum2\" onclick=\"sample4_execDaumPostcode()\" value=\"우편번호 찾기\"><br>\r\n");
      out.write("\t\t\t\t\t\t<input type=\"text\" name = \"addrNum3\" id=\"sample4_roadAddress\" placeholder=\"도로명주소\">\r\n");
      out.write("\t\t\t\t\t\t<input type=\"text\" name = \"addrNum4\" id=\"sample4_jibunAddress\" placeholder=\"지번주소\">\r\n");
      out.write("\t\t\t\t\t\t<span id=\"guide\" style=\"color: #999\"></span></td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td bgcolor=\"powderblue\" align=\"center\">생일</td>\r\n");
      out.write("\t\t\t\t\t\t<td><input type=\"text\" id=\"user_birth_year\" size=\"10\" name = \"birYear\">년\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"text\" id=\"user_birth_month\" size=\"10\" name = \"birMonth\">월\r\n");
      out.write("\t\t\t\t\t\t\t <input type=\"text\" id=\"user_birth_day\" size=\"10\" name = \"birDay\">일</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td bgcolor=\"powderblue\" align=\"center\">관심분야 :</td>\r\n");
      out.write("\t\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"hobby\" value=\"컴퓨터\" >컴퓨터 \r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"hobby\" value=\"인터넷\">인터넷 \r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"hobby\" value=\"여행\">여행 \r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"hobby\" value=\"영화감상\">영화감상 \r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"hobby\" value=\"음악감상\">음악감상\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td bgcolor=\"powderblue\" align=\"center\">자기소개:</td>\r\n");
      out.write("\t\t\t\t\t\t<td><textarea rows=\"5\" , cols=\"50\" id=\"self\" name = \"self\"></textarea></td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</table>\r\n");

      }
     }catch(Exception e){
    	 e.printStackTrace();
     }

      out.write("\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div align=\"center\">\r\n");
      out.write("\t\t\t\t\t<input type=\"submit\" value=\"정보수정\"> <input type=\"reset\" value=\"다시 입력\">\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t<script src=\"http://dmaps.daum.net/map_js_init/postcode.v2.js\"></script>\r\n");
      out.write("\t\t\t\t<script>\r\n");
      out.write("\t\t\t\t\tfunction sample4_execDaumPostcode() {\r\n");
      out.write("\t\t\t\t\t\tnew daum.Postcode(\r\n");
      out.write("\t\t\t\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\t\t\t\toncomplete : function(data) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// 도로명 주소의 노출 규칙에 따라 주소를 조합한다.\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvar fullRoadAddr = data.roadAddress; // 도로명 주소 변수\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvar extraRoadAddr = ''; // 도로명 조합형 주소 변수\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// 법정동명이 있을 경우 추가한다. (법정리는 제외)\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (data.bname !== ''\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t&& /[동|로|가]$/g.test(data.bname)) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\textraRoadAddr += data.bname;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// 건물명이 있고, 공동주택일 경우 추가한다.\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (data.buildingName !== ''\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t&& data.apartment === 'Y') {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\textraRoadAddr += (extraRoadAddr !== '' ? ', '\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t+ data.buildingName\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t: data.buildingName);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// 도로명, 지번 조합형 주소가 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (extraRoadAddr !== '') {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\textraRoadAddr = ' ('\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t+ extraRoadAddr + ')';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// 도로명, 지번 주소의 유무에 따라 해당 조합형 주소를 추가한다.\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (fullRoadAddr !== '') {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tfullRoadAddr += extraRoadAddr;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tdocument\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t.getElementById('sample4_postcode').value = data.zonecode; //5자리 새우편번호 사용\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tdocument\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t.getElementById('sample4_roadAddress').value = fullRoadAddr;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tdocument\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t.getElementById('sample4_jibunAddress').value = data.jibunAddress;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// 사용자가 '선택 안함'을 클릭한 경우, 예상 주소라는 표시를 해준다.\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (data.autoRoadAddress) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t//예상되는 도로명 주소에 조합형 주소를 추가한다.\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar expRoadAddr = data.autoRoadAddress\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t+ extraRoadAddr;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tdocument.getElementById('guide').innerHTML = '(예상 도로명 주소 : '\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t+ expRoadAddr + ')';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} else if (data.autoJibunAddress) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar expJibunAddr = data.autoJibunAddress;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tdocument.getElementById('guide').innerHTML = '(예상 지번 주소 : '\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t+ expJibunAddr + ')';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tdocument.getElementById('guide').innerHTML = '';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}).open();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
